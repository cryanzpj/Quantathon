logl <- function (p) -sum(logp(p[1],p[2],p[3],p[4],p[5]))
temp = nlm(logl,c(100,0,5,200,10))$estimate
func = temp[1]*(temp[2]+sin(temp[3]+temp[4]*t))
temp
temp = nlm(logl,c(0, -1, 2*pi/200, 80, 4))$estimate
temp
logp <- deriv (quote (
-lsigma + log (dnorm((x-M*(a+sin(b+f*t)))/exp(lsigma))
+ dnorm((-x-M*(a+sin(b+f*t)))/exp(lsigma)))),
c("a", "b", "f", "M", "lsigma"), fun=TRUE)
# Function for nlm to minimize - minus the log likelihood summing
# log probabilities (and gradient and hessian) over data points.
logl <- function (p) {
lp <- logp(p[1],p[2],p[3],p[4],p[5])
ll <- -sum(lp)
attr(ll,"gradient") <- -colSums(attr(lp,"gradient"))
ll
}
# The data.
x <- sunspots[1:500]
t <- 1:length(x)
# Estimation, from a carefully chosen starting point.
est <- nlm (logl, c(0, -1, 2*pi/200, 80, 4))
est
x = sunspots[1:500]
t = 1:length(x)
logp <-
deriv (quote (
-lsigma + log (dnorm((x-M*(a + sin(b+f*t)))/exp(lsigma))
+ dnorm((-x-M*(a + sin(b+f*t)))/exp(lsigma)))),
c("a","b","f","M","lsigma"), fun=TRUE, hessian=TRUE)
logl <- function (p) -sum(logp(p[1],p[2],p[3],p[4],p[5]))
temp = nlm(logl,c(0, -1, 2*pi/200, 80, 4))$estimate
func = temp[1]*(temp[2]+sin(temp[3]+temp[4]*t))
temp
mle <- est$estimate
a <- mle[1]
b <- mle[2]
f <- mle[3]
M <- mle[4]
plot(t,x,pch=20)
lines(t,abs(M*(a+sin(b+f*t))),col="red")
plot(t,x,pch=10)
plot(t,x,pch=3)
plot(t,x,pch=100)
plot(t,x,pch=20)
plot(t,x,pch=30)
plot(t,x,pch=20)
lines(t,abs(M*(a+sin(b+f*t))),col="red")
lines(t,abs(M*(a+tsin(b+f*t))),col="red")
lines(t,abs(M*(a+t*sin(b+f*t))),col="red")
lines(t,abs(M*(a+sin(b+f*t))),col="red")
lines(t,abs(M*(a+0.5sin(b+f*t))),col="red")
lines(t,abs(M*(a+0.5*sin(b+f*t))),col="red")
lines(t,abs(M*(a+0.5*t*sin(b+f*t))),col="red")
lines(t,abs(M*(a+0.5*t^-2*sin(b+f*t))),col="red")
lines(t,abs(M*(a+sin(b+f*t))),col="red")
plot(t,x,pch=20)
lines(t,abs(M*(a+sin(b+f*t))),col="red")
rpois(100,17.2)
data = rpois(100,17.2)
plot(data-17.2 , sqrt(data) - 17.2)
plot(data-17.2 , sqrt(data) - sqrt(17.2))
plot(data-17.2 , sqrt(data) - 17.2)
plot(data-17.2 , sqrt(data))
summary(data-17.2 ~ sqrt(data))
summary(lm(data-17.2 ~ sqrt(data))
)
summary(lm(data-17.2 ~ sqrt(data)+ data))
summary(lm(log(data-17.2) ~ sqrt(data)))
summary(lm(data-17.2 ~ log(sqrt(data))))
£©
exp(-25)
exp(265)
exp(25)
q()
hehe123
hehe123
$hehe123$
install.packages("knitr", dependencies = FALSE)
version
q_map<-function(r=1,x_o=runif(1,0,1),N=100,burn_in=0,...)
{
par(mfrow=c(2,1),mar=c(4,4,1,2),lwd=2)
############# Trace #############
x<-array(dim=N)
x[1]<-x_o
for(i in 2:N)
x[i]<-r*x[i-1]*(1-x[i-1])
plot(x[(burn_in+1):N],type='l',xlab='t',ylab='x',...)
#################################
##########  Quadradic Map ########
x<-seq(from=0,to=1,length.out=100)
x_np1<-array(dim=100)
for(i in 1:length(x))
x_np1[i]<-r*x[i]*(1-x[i])
plot(x,x_np1,type='l',xlab=expression(x[t]),ylab=expression(x[t+1]))
abline(0,1)
start=x_o
vert=FALSE
lines(x=c(start,start),y=c(0,r*start*(1-start)) )
for(i in 1:(2*N))
{
if(vert)
{
lines(x=c(start,start),y=c(start,r*start*(1-start)) )
vert=FALSE
}
else
{
lines(x=c(start,
r*start*(1-start)),
y=c(r*start*(1-start),
r*start*(1-start)) )
vert=TRUE
start=r*start*(1-start)
}
}
#################################
}
q_map<-function(r=1,x_o=runif(1,0,1),N=100,burn_in=0,...)
{
par(mfrow=c(2,1),mar=c(4,4,1,2),lwd=2)
############# Trace #############
x<-array(dim=N)
x[1]<-x_o
for(i in 2:N)
x[i]<-r*x[i-1]*(1-x[i-1])
plot(x[(burn_in+1):N],type='l',xlab='t',ylab='x',...)
#################################
##########  Quadradic Map ########
x<-seq(from=0,to=1,length.out=100)
x_np1<-array(dim=100)
for(i in 1:length(x))
x_np1[i]<-r*x[i]*(1-x[i])
plot(x,x_np1,type='l',xlab=expression(x[t]),ylab=expression(x[t+1]))
abline(0,1)
start=x_o
vert=FALSE
lines(x=c(start,start),y=c(0,r*start*(1-start)) )
for(i in 1:(2*N))
{
if(vert)
{
lines(x=c(start,start),y=c(start,r*start*(1-start)) )
vert=FALSE
}
else
{
lines(x=c(start,
r*start*(1-start)),
y=c(r*start*(1-start),
r*start*(1-start)) )
vert=TRUE
start=r*start*(1-start)
}
}
#################################
}
q_map(r=3.84,x_o=0.4)
q_map<-function(r=1,x_o=runif(1,0,1),N=100,burn_in=0,...)
{
par(mfrow=c(2,1),mar=c(4,4,1,2),lwd=2)
############# Trace #############
x<-array(dim=N)
x[1]<-x_o
for(i in 2:N)
x[i]<-r*x[i-1]*(1-x[i-1])
plot(x[(burn_in+1):N],type='l',xlab='t',ylab='x',...)
#################################
##########  Quadradic Map ########
x<-seq(from=0,to=1,length.out=100)
x_np1<-array(dim=100)
for(i in 1:length(x))
x_np1[i]<-r*x[i]*(1-x[i])
plot(x,x_np1,type='l',xlab=expression(x[t]),ylab=expression(x[t+1]))
abline(0,1)
start=x_o
vert=FALSE
lines(x=c(start,start),y=c(0,r*start*(1-start)) )
for(i in 1:(2*N))
{
if(vert)
{
lines(x=c(start,start),y=c(start,r*start*(1-start)) )
vert=FALSE
}
else
{
lines(x=c(start,
r*start*(1-start)),
y=c(r*start*(1-start),
r*start*(1-start)) )
vert=TRUE
start=r*start*(1-start)
}
}
#################################
}
q_map(r=3.84,x_o=0.4)
library(parallel)
bifurcation<-function(from=3,to=4,res=500,
x_o=runif(1,0,1),N=500,reps=500,cores=4)
{
r_s<-seq(from=from,to=to,length.out=res)
r<-numeric(res*reps)
for(i in 1:res)
r[((i-1)*reps+1):(i*reps)]<-r_s[i]
x<-array(dim=N)
iterate<-mclapply(1:(res*reps),
mc.cores=cores,
function(k){
x[1]<-runif(1,0,1)
for(i in 2:N)
x[i]<-r[k]*x[i-1]*(1-x[i-1])
return(x[N])
})
plot(r,iterate,pch=15,cex=0.1)
return(cbind(r,iterate))
}
#warning: Even in parallel with 4 cores, this is by no means fast code!
bi<-bifurcation()
png('chaos.png',width=1000,height=850)
par(bg='black',col='green',col.main='green',cex=1)
plot(bi,col='green',xlab='R',ylab='n --> inf',main='',pch=15,cex=0.2)
dev.off()
q_map<-function(r=1,x_o=runif(1,0,1),N=100,burn_in=0,...)
{
par(mfrow=c(2,1),mar=c(4,4,1,2),lwd=2)
############# Trace #############
x<-array(dim=N)
x[1]<-x_o
for(i in 2:N)
x[i]<-r*x[i-1]*(1-x[i-1])
plot(x[(burn_in+1):N],type='l',xlab='t',ylab='x',...)
#################################
##########  Quadradic Map ########
x<-seq(from=0,to=1,length.out=100)
x_np1<-array(dim=100)
for(i in 1:length(x))
x_np1[i]<-r*x[i]*(1-x[i])
plot(x,x_np1,type='l',xlab=expression(x[t]),ylab=expression(x[t+1]))
abline(0,1)
start=x_o
vert=FALSE
lines(x=c(start,start),y=c(0,r*start*(1-start)) )
for(i in 1:(2*N))
{
if(vert)
{
lines(x=c(start,start),y=c(start,r*start*(1-start)) )
vert=FALSE
}
else
{
lines(x=c(start,
r*start*(1-start)),
y=c(r*start*(1-start),
r*start*(1-start)) )
vert=TRUE
start=r*start*(1-start)
}
}
#################################
}
q_map(r=3.84,x_o=0.4)
library(parallel)
bifurcation<-function(from=3,to=4,res=500,
x_o=runif(1,0,1),N=500,reps=500,cores=4)
{
r_s<-seq(from=from,to=to,length.out=res)
r<-numeric(res*reps)
for(i in 1:res)
r[((i-1)*reps+1):(i*reps)]<-r_s[i]
x<-array(dim=N)
iterate<-mclapply(1:(res*reps),
mc.cores=cores,
function(k){
x[1]<-runif(1,0,1)
for(i in 2:N)
x[i]<-r[k]*x[i-1]*(1-x[i-1])
return(x[N])
})
plot(r,iterate,pch=15,cex=0.1)
return(cbind(r,iterate))
}
#warning: Even in parallel with 4 cores, this is by no means fast code!
bi<-bifurcation()
png('chaos.png',width=1000,height=850)
par(bg='black',col='green',col.main='green',cex=1)
plot(bi,col='green',xlab='R',ylab='n --> inf',main='',pch=15,cex=0.2)
dev.off()
library(parallel)
bifurcation<-function(from=3,to=4,res=500,
x_o=runif(1,0,1),N=500,reps=500,cores=4)
{
r_s<-seq(from=from,to=to,length.out=res)
r<-numeric(res*reps)
for(i in 1:res)
r[((i-1)*reps+1):(i*reps)]<-r_s[i]
x<-array(dim=N)
iterate<-mclapply(1:(res*reps),
mc.cores=cores,
function(k){
x[1]<-runif(1,0,1)
for(i in 2:N)
x[i]<-r[k]*x[i-1]*(1-x[i-1])
return(x[N])
})
plot(r,iterate,pch=15,cex=0.1)
return(cbind(r,iterate))
}
#warning: Even in parallel with 4 cores, this is by no means fast code!
bi<-bifurcation()
png('chaos.png',width=1000,height=850)
par(bg='black',col='green',col.main='green',cex=1)
plot(bi,col='green',xlab='R',ylab='n --> inf',main='',pch=15,cex=0.2)
dev.off()
setwd("C:/Users/cryanzpj/Desktop/hehe")
dir.creat("data")
dir.create("data")
ls()
library("tseries")
library("itsmr")
library("ggplot2")
file = ts(read.csv("in_sample_data.csv"))\
file = ts(read.csv("in_sample_data.csv"))\
ls()
file = ts(read.csv("in_sample_data.csv"))\
file = ts(read.csv("in_sample_data.csv"))
file 
plot(file)
plot(file[,1])
plot(file[,3])
library("HMMCont")
data = logreturns(as.numeric(file[,2]))
typeof(logreturns(Prices))
data
hmm = hmmsetcont(data[1:230]*20)
hmm = baumwelchcont(hmm)
summary(hmm)
hmm2 = hmmsetcont(logreturns(Prices)*20)
hmm2 = baumwelchcont(hmm2)
summary(hmm2)
clear()
c()
ls()
oil <- read.csv("in_sample_data.csv", header=T, stringsAsFactors=F, strip.white=T)
oilspot <- oil[,2]
n <- length(oilspot)
logreturns <- log(oilspot[2:n]/oilspot[1:(n-1)])
negloglik <- function(par, data){
  #par={mu1, mu2, sd1, sd2, p12, p21}
  mu <- par[c(1,2)]
  sd <- par[c(3,4)]
  ps <- par[c(5,6)]
  #ps[1]=p12, ps[2]=p21
  n <- length(data)
  loglik <- 0
  P <- matrix(c(1-ps[1], ps[1], ps[2], 1-ps[2]), nrow=2, ncol=2, byrow=T)
  pi <- c(ps[2], ps[1])/sum(ps)
  fr <- c(pi[1]*dnorm(data[1], mu[1], sd[1]), 
          pi[2]*dnorm(data[1], mu[2], sd[2]))
  f <- sum(fr)
  loglik <- loglik + log(f)
  pr <- c(fr[1]/f, fr[2]/f)
  frr <- matrix(0, nrow=2, ncol=2)
  for(i in 1:2){
    for(j in 1:2){
      frr[i,j] <- pr[j]*P[j,i]*dnorm(data[2], mu[i], sd[i])
    }
  }
  f <- sum(frr)
  loglik <- loglik + log(f)
  for(t in 3:n){
    for(i in 1:2){
      pr[i] <- sum(frr[i,])/f
    }
    for(i in 1:2){
      for(j in 1:2){
        frr[i,j] <- pr[j]*P[j,i]*dnorm(data[t], mu[i], sd[i])
      }
    }
    f <- sum(frr)
    loglik <- loglik + log(f)
  }
  return(-loglik)
}
par <- c(0.01, -0.01, 0.1, 0.2, 0.15, 0.21)
negloglik(par, data=logreturns)
model <- nlminb(par, negloglik, data=logreturns[1:1500], lower=c(-Inf, -Inf, 0, 0, 0, 0), upper = c(Inf, Inf, Inf, Inf, 1, 1))
estimatestate <- function(par, data){
  #par={mu1, mu2, sd1, sd2, p12, p21}
  mu <- par[c(1,2)]
  sd <- par[c(3,4)]
  ps <- par[c(5,6)]
  #ps[1]=p12, ps[2]=p21
  n <- length(data)
  state <- numeric(n-1)
  prm <- matrix(0, nrow=n, ncol=2)
  P <- matrix(c(1-ps[1], ps[1], ps[2], 1-ps[2]), nrow=2, ncol=2, byrow=T)
  pi <- c(ps[2], ps[1])/sum(ps)
  fr <- c(pi[1]*dnorm(data[1], mu[1], sd[1]), 
          pi[2]*dnorm(data[1], mu[2], sd[2]))
  f <- sum(fr)
  pr <- c(f}
estimatestate <- function(par, data){
  #par={mu1, mu2, sd1, sd2, p12, p21}
  mu <- par[c(1,2)]
  sd <- par[c(3,4)]
  ps <- par[c(5,6)]
  #ps[1]=p12, ps[2]=p21
  n <- length(data)
  state <- numeric(n-1)
  prm <- matrix(0, nrow=n, ncol=2)
  P <- matrix(c(1-ps[1], ps[1], ps[2], 1-ps[2]), nrow=2, ncol=2, byrow=T)
  pi <- c(ps[2], ps[1])/sum(ps)
  fr <- c(pi[1]*dnorm(data[1], mu[1], sd[1]), 
          pi[2]*dnorm(data[1], mu[2], sd[2]))
  f <- sum(fr)
  pr <- c(fr[1]/f, fr[2]/f)
  prm[1,] <- pr
  state[1] <- which.max(pr)
  frr <- matrix(0, nrow=2, ncol=2)
  for(i in 1:2){
    for(j in 1:2){
      frr[i,j] <- pr[j]*P[j,i]*dnorm(data[2], mu[i], sd[i])
    }
  }
  f <- sum(frr)
  for(t in 3:n){
    for(i in 1:2){
      pr[i] <- sum(frr[i,])/f
    }
    prm[t-1,] <- pr
    state[t-1] <- which.max(pr)
    for(i in 1:2){
      for(j in 1:2){
        frr[i,j] <- pr[j]*P[j,i]*dnorm(data[t], mu[i], sd[i])
      }
    }
    f <- sum(frr)
  }
  return(state)
}
# states <- estimatestate(model$par, logreturns[1:1500])
# par(mfrow=c(3,1))
# plot(oilspot[2:1501])
# plot(logreturns[1:1500])
# plot(states[[1]][,1], type="l", col="green")
# lines(states[[1]][,2], type="l", col="red")
# 
currstate <- function(par, data){
  #par={mu1, mu2, sd1, sd2, p12, p21}
  mu <- par[c(1,2)]
  sd <- par[c(3,4)]
  ps <- par[c(5,6)]
  #ps[1]=p12, ps[2]=p21
  n <- length(data)
  state <- numeric(n)
  P <- matrix(c(1-ps[1], ps[1], ps[2], 1-ps[2]), nrow=2, ncol=2, byrow=T)
  pi <- c(ps[2], ps[1])/sum(ps)
  fr <- c(pi[1]*dnorm(data[1], mu[1], sd[1]), 
          pi[2]*dnorm(data[1], mu[2], sd[2]))
  f <- sum(fr)
  pr <- c(fr[1]/f, fr[2]/f)
  frr <- matrix(0, nrow=2, ncol=2)
  for(i in 1:2){
    for(j in 1:2){
      frr[i,j] <- pr[j]*P[j,i]*dnorm(data[2], mu[i], sd[i])
    }
  }
  f <- sum(frr)
  for(t in 3:n){
    for(i in 1:2){
      pr[i] <- sum(frr[i,])/f
    }
    for(i in 1:2){
      for(j in 1:2){
        frr[i,j] <- pr[j]*P[j,i]*dnorm(data[t], mu[i], sd[i])
      }
    }
    f <- sum(frr)
  }
  return(which.max(pr))
)\
ource("Simulation Class.R")
source("Strategy Class.R")
oil <- read.csv("in_sample_data.csv", header=T, stringsAsFactors=F, strip.white=T)
oil$date <- as.Date(as.character(oil$date), format="%Y%m%d")
plot(oil[,2]/oil[1,2], type="l")
hcol <- rainbow(9)
for(i in 1:10){
  lines(oil[,2*i+1]/oil[1,2*i+1], col=hcol[i])
}
simdates <- oil$date
simlength <- length(simdates)
spotprices <- oil$oil_spot
futureprices <- oil[,c(3,5,7,9,11,13,15,17,19,21,23)]
futurers <- oil[,c(4,6,8,10,12,14,16,18,20,22,24)]
stgy1 <- strategy()
stgy1@strategy <- regimeSwitching
sim1 <- simulation()
sim1 <- startNewSimulation(sim1, simlength, simdates, spotprices, futureprices, futurers, stgy1)
sim1
sim1 <- oneDayForward(sim1)
sim1 <- runAll(sim1)
sim1
plot(sim1@pnl, type="l")
plot(sim1@cashaccount/sim1@cashaccount[1], type="l")
ls()
q()
